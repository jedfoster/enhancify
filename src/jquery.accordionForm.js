// Generated by CoffeeScript 1.6.3
(function($) {
  var AccordionForm, AccordionStep;
  $.fn.accordionify = function(options) {
    return this.each(function() {
      return new AccordionForm(this, options);
    });
  };
  AccordionForm = (function() {
    function AccordionForm(element, options) {
      var stepElements,
        _this = this;
      this.element = $(element);
      this.element.validate({
        ignore: ':hidden',
        showErrors: function() {}
      });
      this._options = $.extend({
        stepSelector: '.accordion-step',
        headerSelector: '.accordion-header'
      }, options);
      stepElements = this.element.find(this._options.stepSelector);
      this.steps = stepElements.map(function(index, element) {
        return new AccordionStep(_this, index, index === stepElements.length - 1, element, _this._options);
      });
      this._transitionTo(0);
      this._collapseNextSteps();
    }

    AccordionForm.prototype["continue"] = function() {
      if (this.currentStep.isLast) {
        return;
      }
      if (this.currentStepIsValid()) {
        return this._transitionTo(this.currentStep.index + 1);
      }
    };

    AccordionForm.prototype.goBackTo = function(index) {
      if (index < 0 || index >= this.currentStep.index) {
        return;
      }
      this._transitionTo(index);
      return this._collapseNextSteps();
    };

    AccordionForm.prototype.currentStepIsValid = function() {
      return this.element.valid();
    };

    AccordionForm.prototype._transitionTo = function(index) {
      if (this.currentStep != null) {
        this.currentStep.collapse(true);
      }
      this.currentStep = this.steps[index];
      return this.currentStep.expand();
    };

    AccordionForm.prototype._collapseNextSteps = function() {
      var step, _i, _len, _ref, _results;
      _ref = this.steps.slice(this.currentStep.index + 1);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        _results.push(step.collapse(false));
      }
      return _results;
    };

    return AccordionForm;

  })();
  return AccordionStep = (function() {
    function AccordionStep(accordionForm, index, isLast, element, _options) {
      this.accordionForm = accordionForm;
      this.index = index;
      this.isLast = isLast;
      this._options = _options;
      this.element = $(element);
      this.header = this.element.find(this._options.headerSelector);
      if (!this.isLast) {
        this.appendEditButton();
        this.appendContinueButton();
      }
    }

    AccordionStep.prototype.expand = function() {
      this.header.siblings().slideDown(500);
      return this.header.find('button').hide();
    };

    AccordionStep.prototype.collapse = function(showEditButton) {
      this.header.siblings().hide();
      if (showEditButton) {
        return this.header.find('button').show();
      } else {
        return this.header.find('button').hide();
      }
    };

    AccordionStep.prototype.appendEditButton = function() {
      var button,
        _this = this;
      button = $('<button type="button">Edit</button>');
      button.hide();
      button.click(function() {
        return _this.accordionForm.goBackTo(_this.index);
      });
      return this.header.append(button);
    };

    AccordionStep.prototype.appendContinueButton = function() {
      var button,
        _this = this;
      button = $('<button type="button">Continue</button>');
      button.click(function() {
        return _this.accordionForm["continue"]();
      });
      return this.element.append(button);
    };

    return AccordionStep;

  })();
})(jQuery);
