// Generated by CoffeeScript 1.6.3
(function($) {
  var AccordionForm, AccordionStep;
  $.fn.accordionify = function(options) {
    var element;
    element = $(this[0]);
    if (!element.data('accordionForm')) {
      element.data('accordionForm', new AccordionForm(element, options));
    }
    return element.data('accordionForm');
  };
  AccordionForm = (function() {
    function AccordionForm(_element, options) {
      var stepElements,
        _this = this;
      this._element = _element;
      this._options = $.extend({
        stepSelector: '.accordion-step',
        headerSelector: '.accordion-header',
        editButtonClass: 'accordion-edit',
        continueButtonClass: 'accordion-continue',
        getEditButtonText: function(element) {
          return "Edit";
        },
        getContinueButtonText: function(element) {
          return "Continue";
        },
        isStepComplete: function(element) {
          return true;
        },
        onStepCollapsed: function(element) {},
        onStepExpanded: function(element) {},
        onStepDisabled: function(element) {},
        onStepEnabled: function(element) {}
      }, options);
      stepElements = this._element.find(this._options.stepSelector);
      this._steps = stepElements.map(function(index, element) {
        return new AccordionStep(_this, index, index === stepElements.length - 1, $(element), _this._options);
      });
      this._transitionTo(this._steps[0]);
      this._collapseSubsequentSteps();
    }

    AccordionForm.prototype["continue"] = function() {
      if (this._currentStep.isComplete() && !this._currentStep.isLast) {
        return this._transitionTo(this._nextEnabledStep());
      }
    };

    AccordionForm.prototype.goBackToStep = function(index) {
      var targetStep;
      targetStep = this._steps[index];
      if ((targetStep != null) && targetStep.isEnabled && index < this._currentStep.index) {
        this._transitionTo(targetStep);
        return this._collapseSubsequentSteps();
      }
    };

    AccordionForm.prototype.disableStep = function(index) {
      var targetStep;
      targetStep = this._steps[index];
      if (targetStep != null) {
        targetStep.disable();
        if (targetStep === this._currentStep) {
          return this["continue"]();
        }
      }
    };

    AccordionForm.prototype.enableStep = function(index) {
      var targetStep;
      targetStep = this._steps[index];
      if (targetStep != null) {
        targetStep.enable();
        if (index < this._currentStep.index) {
          return this.goBackToStep(index);
        }
      }
    };

    AccordionForm.prototype._nextEnabledStep = function() {
      var step, _i, _len, _ref;
      _ref = this._steps.slice(this._currentStep.index + 1);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        if (step.isEnabled) {
          return step;
        }
      }
    };

    AccordionForm.prototype._transitionTo = function(targetStep) {
      if (this._currentStep != null) {
        this._currentStep.collapse(this._currentStep.isEnabled);
      }
      this._currentStep = targetStep;
      return this._currentStep.expand();
    };

    AccordionForm.prototype._collapseSubsequentSteps = function() {
      var step, _i, _len, _ref, _results;
      _ref = this._steps.slice(this._currentStep.index + 1);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        step = _ref[_i];
        _results.push(step.collapse(false));
      }
      return _results;
    };

    return AccordionForm;

  })();
  return AccordionStep = (function() {
    function AccordionStep(_accordionForm, index, isLast, _element, _options) {
      this._accordionForm = _accordionForm;
      this.index = index;
      this.isLast = isLast;
      this._element = _element;
      this._options = _options;
      this._header = this._element.find(this._options.headerSelector);
      if (!this.isLast) {
        this._appendEditButton();
        this._appendContinueButton();
      }
      this.isEnabled = true;
    }

    AccordionStep.prototype.expand = function() {
      $('html, body').animate({
        scrollTop: this._element.offset().top
      });
      if (!this.isLast) {
        this._editButton.hide();
      }
      this._header.siblings().slideDown(500);
      return this._options.onStepExpanded(this._element);
    };

    AccordionStep.prototype.collapse = function(showEditButton) {
      if (!this.isLast) {
        this._editButton.toggle(showEditButton);
      }
      this._header.siblings().hide();
      return this._options.onStepCollapsed(this._element);
    };

    AccordionStep.prototype.isComplete = function() {
      return this._options.isStepComplete(this._element);
    };

    AccordionStep.prototype.disable = function() {
      if (this.isEnabled) {
        this.isEnabled = false;
        this._editButton.hide();
        this._continueButton.hide();
        return this._options.onStepDisabled(this._element);
      }
    };

    AccordionStep.prototype.enable = function() {
      if (!this.isEnabled) {
        this.isEnabled = true;
        return this._options.onStepEnabled(this._element);
      }
    };

    AccordionStep.prototype._appendEditButton = function() {
      var _this = this;
      this._editButton = $('<button type="button" class="' + this._options.editButtonClass + '">' + this._options.getEditButtonText(this._element) + '</button>');
      this._editButton.hide();
      this._editButton.click(function() {
        return _this._accordionForm.goBackToStep(_this.index);
      });
      return this._header.append(this._editButton);
    };

    AccordionStep.prototype._appendContinueButton = function() {
      var _this = this;
      this._continueButton = $('<button type="button" class="' + this._options.continueButtonClass + '">' + this._options.getContinueButtonText(this._element) + '</button>');
      this._continueButton.click(function() {
        return _this._accordionForm["continue"]();
      });
      return this._element.append(this._continueButton);
    };

    return AccordionStep;

  })();
})(jQuery);
