// Generated by CoffeeScript 1.6.3
var AccordionForm, AccordionStep;

(function($) {
  return $.fn.accordionify = function(options) {
    return this.each(function() {
      return new AccordionForm(this, this.options);
    });
  };
})(jQuery);

AccordionForm = (function() {
  function AccordionForm(element, options) {
    var stepElements;
    this.options = options;
    this.self = this;
    this.element = $(element);
    this.options = $.extend({
      stepSelector: '.accordion-step',
      headerSelector: '.accordion-header',
      onExpand: function(step) {},
      onCollapse: function(step) {},
      onComplete: function(step) {}
    }, options);
    stepElements = this.element.find(this.options.stepSelector);
    this.firstStep = this.createStep(stepElements.first(), stepElements.slice(1));
    this.currentStep = this.firstStep;
    this.currentStep.expand();
  }

  AccordionForm.prototype.createStep = function(element, nextElements) {
    var nextStep;
    nextStep = nextElements.length > 0 ? this.createStep(nextElements.first(), nextElements.slice(1)) : null;
    console.log(nextStep);
    return new AccordionStep(element, nextStep, this.options);
  };

  return AccordionForm;

})();

AccordionStep = (function() {
  function AccordionStep(element, next, options) {
    this.next = next;
    this.options = options;
    this.element = $(element);
    this.header = this.element.find(this.options.headerSelector);
    if (this.next != null) {
      this.appendEditButton();
      this.appendContinueButton();
    }
    this.content = this.header.siblings();
    this.collapse();
  }

  AccordionStep.prototype.expand = function() {
    this.disableExpansion();
    this.options.onExpand(this);
    this.content.show();
    return this.collapseAndDisableExpansionForSubsequentSteps();
  };

  AccordionStep.prototype.collapse = function() {
    this.content.hide();
    return this.options.onCollapse(this);
  };

  AccordionStep.prototype.complete = function() {
    if (this.validate()) {
      this.collapse();
      this.enableExpansion();
      this.next.expand();
      return this.options.onComplete();
    }
  };

  AccordionStep.prototype.appendEditButton = function() {
    var button,
      _this = this;
    button = $('<button class="accordion-edit" type="button">Edit</button>');
    button.hide();
    button.click(function() {
      return _this.expand();
    });
    return this.header.append(button);
  };

  AccordionStep.prototype.appendContinueButton = function() {
    var button,
      _this = this;
    button = $('<button type="button">Continue</button>');
    button.click(function() {
      return _this.complete();
    });
    return this.element.append(button);
  };

  AccordionStep.prototype.enableExpansion = function() {
    return this.header.find('.accordion-edit').show();
  };

  AccordionStep.prototype.disableExpansion = function() {
    return this.header.find('.accordion-edit').hide();
  };

  AccordionStep.prototype.collapseAndDisableExpansionForSubsequentSteps = function() {
    var pointer, _results;
    pointer = this.next;
    _results = [];
    while (pointer != null) {
      pointer.collapse();
      pointer.disableExpansion();
      _results.push(pointer = pointer.next);
    }
    return _results;
  };

  AccordionStep.prototype.validate = function() {
    return true;
  };

  return AccordionStep;

})();
