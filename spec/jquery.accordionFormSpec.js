// Generated by CoffeeScript 1.6.3
describe('An accordion form, ', function() {
  var accordionForm, firstStep, form, mockValidator, secondStep, thirdStep;
  form = null;
  firstStep = null;
  secondStep = null;
  thirdStep = null;
  mockValidator = function() {
    return true;
  };
  accordionForm = null;
  beforeEach(function() {
    this.addMatchers({
      toBeExpanded: function() {
        var element, _i, _len, _ref, _results;
        _ref = $(this.actual).children();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push(expect(element).toBeVisible());
        }
        return _results;
      },
      toBeCollapsed: function() {
        var element, _i, _len, _ref, _results;
        _ref = $(this.actual).children().slice(1);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push(expect(element).toBeHidden());
        }
        return _results;
      }
    });
    jasmine.getFixtures().fixturesPath = 'spec/fixtures/';
    loadFixtures('accordionForm.html');
    form = $('#form1');
    firstStep = form.find('.accordion-step').first();
    secondStep = firstStep.next();
    thirdStep = secondStep.next();
    mockValidator = function() {
      return true;
    };
    return accordionForm = form.accordionify({
      isStepComplete: function(element) {
        return mockValidator();
      }
    });
  });
  describe('when initially rendered, ', function() {
    it('should expand the first step by default', function() {
      expect(firstStep).toBeExpanded();
      expect(secondStep).toBeCollapsed();
      return expect(thirdStep).toBeCollapsed();
    });
    return it('should display a continue button in the expanded step', function() {
      firstStep = form.find('.accordion-step').first();
      return expect(firstStep).toContain('button.accordion-continue');
    });
  });
  describe('when a step is complete and the continue button is clicked, ', function() {
    beforeEach(function() {
      mockValidator = function() {
        return true;
      };
      accordionForm.disableStep(1);
      return firstStep.find('button.accordion-continue').click();
    });
    it('should collapse the completed step', function() {
      return expect(firstStep).toBeCollapsed();
    });
    it('should display an edit button in the completed step header', function() {
      return expect(firstStep.find('.accordion-header')).toContain('button.accordion-edit');
    });
    return it('should expand the next enabled step', function() {
      expect(secondStep).toBeCollapsed();
      return expect(thirdStep).toBeExpanded();
    });
  });
  describe('when a step is incomplete and the continue button is clicked, ', function() {
    beforeEach(function() {
      mockValidator = function() {
        return false;
      };
      return firstStep.find('button.accordion-continue').click();
    });
    return it('should do nothing', function() {
      expect(firstStep).toBeExpanded();
      return expect(secondStep).toBeCollapsed();
    });
  });
  describe('when an edit button is clicked, ', function() {
    beforeEach(function() {
      accordionForm["continue"]();
      return firstStep.find('button.accordion-edit').click();
    });
    it('should collapse the current step', function() {
      return expect(secondStep).toBeCollapsed();
    });
    it('should expand the selected step', function() {
      return expect(firstStep).toBeExpanded();
    });
    return it('should not display the edit button in any steps after the selected step', function() {
      return expect(secondStep.find('button.accordion-edit')).toBeHidden();
    });
  });
  describe('when the current step is disabled, ', function() {
    beforeEach(function() {
      return accordionForm.disableStep(0);
    });
    it('should collapse the disabled step', function() {
      return expect(firstStep).toBeCollapsed();
    });
    it('should not display an edit button in the disabled step header', function() {
      return expect(firstStep.find('button.accordion-edit')).toBeHidden();
    });
    return it('should expand the next enabled step', function() {
      return expect(secondStep).toBeExpanded();
    });
  });
  return describe('when a step before the current step is enabled, ', function() {
    beforeEach(function() {
      accordionForm["continue"]();
      accordionForm.disableStep(0);
      return accordionForm.enableStep(0);
    });
    it('should collapse the current step', function() {
      return expect(secondStep).toBeCollapsed();
    });
    it('should expand the enabled step', function() {
      return expect(firstStep).toBeExpanded();
    });
    return it('should not display the edit button in any steps after the selected step', function() {
      return expect(secondStep.find('button.accordion-edit')).toBeHidden();
    });
  });
});
